#!/bin/bash
# NEXTFLOW TASK: get_raxml_tree
set -e
set -u
NXF_DEBUG=${NXF_DEBUG:=0}; [[ $NXF_DEBUG > 1 ]] && set -x
NXF_ENTRY=${1:-nxf_main}


nxf_sleep() {
  sleep $1 2>/dev/null || sleep 1;
}

nxf_date() {
    local ts=$(date +%s%3N);
    if [[ ${#ts} == 10 ]]; then echo ${ts}000
    elif [[ $ts == *%3N ]]; then echo ${ts/\%3N/000}
    elif [[ $ts == *3N ]]; then echo ${ts/3N/000}
    elif [[ ${#ts} == 13 ]]; then echo $ts
    else echo "Unexpected timestamp value: $ts"; exit 1
    fi
}

nxf_env() {
    echo '============= task environment ============='
    env | sort | sed "s/\(.*\)AWS\(.*\)=\(.\{6\}\).*/\1AWS\2=\3xxxxxxxxxxxxx/"
    echo '============= task output =================='
}

nxf_kill() {
    declare -a children
    while read P PP;do
        children[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    kill_all() {
        [[ $1 != $$ ]] && kill $1 2>/dev/null || true
        for i in ${children[$1]:=}; do kill_all $i; done
    }

    kill_all $1
}

nxf_mktemp() {
    local base=${1:-/tmp}
    mkdir -p "$base"
    if [[ $(uname) = Darwin ]]; then mktemp -d $base/nxf.XXXXXXXXXX
    else TMPDIR="$base" mktemp -d -t nxf.XXXXXXXXXX
    fi
}

nxf_fs_copy() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  cp -fRL $source $target/$basedir
}

nxf_fs_move() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  mv -f $source $target/$basedir
}

nxf_fs_rsync() {
  rsync -rRl $1 $2
}

nxf_fs_rclone() {
  rclone copyto $1 $2/$1
}

nxf_fs_fcp() {
  fcp $1 $2/$1
}

on_exit() {
    exit_status=${nxf_main_ret:=$?}
    printf -- $exit_status > /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work/0c/dafe7dfc4059dae876f14822305f8f/.exitcode
    set +u
    docker rm $NXF_BOXID &>/dev/null || true
    exit $exit_status
}

on_term() {
    set +e
    docker stop $NXF_BOXID
}

nxf_launch() {
    docker run -i --cpu-shares 2048 -e "NXF_TASK_WORKDIR" -v /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work:/home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work -w "$PWD" --name $NXF_BOXID nextflow/phytoy-nf /bin/bash -ue /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work/0c/dafe7dfc4059dae876f14822305f8f/.command.sh
}

nxf_stage() {
    true
    # stage input files
    rm -f BB11021.phy
    rm -f BB11029.phy
    rm -f BB11001.phy
    rm -f BB11013.phy
    rm -f BB11025.phy
    ln -s /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work/d7/efb33a2da45f03b7c54848e7ea9a01/BB11021.phy BB11021.phy
    ln -s /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work/ea/892451e06fcbeddda770a7028f53ac/BB11029.phy BB11029.phy
    ln -s /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work/4c/1bce5ca2f5c5479f4cf1c368ad46b0/BB11001.phy BB11001.phy
    ln -s /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work/ae/c40dae9c3fad7fbdb968ea7f5826b7/BB11013.phy BB11013.phy
    ln -s /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work/d6/beea660117a1d09481a57d47d3b116/BB11025.phy BB11025.phy
}

nxf_unstage() {
    true
    [[ ${nxf_main_ret:=0} != 0 ]] && return
}

nxf_main() {
    trap on_exit EXIT
    trap on_term TERM INT USR2
    trap '' USR1

    [[ "${NXF_CHDIR:-}" ]] && cd "$NXF_CHDIR"
    export NXF_BOXID="nxf-$(dd bs=18 count=1 if=/dev/urandom 2>/dev/null | base64 | tr +/ 0A | tr -d '\r\n')"
    NXF_SCRATCH=''
    [[ $NXF_DEBUG > 0 ]] && nxf_env
    touch /home/quirin/Desktop/nextflow_test/work/f7/d8c87a2ad60516d9e7f7cd0b61be50/work/0c/dafe7dfc4059dae876f14822305f8f/.command.begin
    set +u
    set -u
    [[ $NXF_SCRATCH ]] && cd $NXF_SCRATCH
    export NXF_TASK_WORKDIR="$PWD"
    nxf_stage

    set +e
    (set -o pipefail; (nxf_launch | tee .command.out) 3>&1 1>&2 2>&3 | tee .command.err) &
    pid=$!
    wait $pid || nxf_main_ret=$?
    nxf_unstage
}

$NXF_ENTRY
